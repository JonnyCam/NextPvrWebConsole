@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>    
    /* EPG grid styling */
    .epg-container
    {
        position:absolute;
        top:170px;
        left:30px;
        right:30px;
        bottom:30px;
        overflow:scroll;
        border:solid 1px black;
    }
    .epg li
    {
        list-style:none;
        margin:0;
        padding:0;
    }
    .epg
    {
        position:absolute;        
        top:0;
        bottom:0;
        left:0;
        width:7325px;
    }
    .epg-channels
    {
        left:0px;
        width:120px;
        top:26px;
        position:absolute;
        z-index:3;
        overflow:hidden;
        background:#333;
    }
    .epg-channels ul
    {
        margin:0;
        padding:0;
    }
    .epg-channels .epg-channel
    {
        height: 65px;
        width: 121px;
        font-size: 11px;
        color: white;
        margin:0;
        padding:0;
        /*position: absolute;*/
        overflow: hidden;
        text-align: center;
        list-style-type: none;
        border-bottom:solid 1px white;
    }
    .epg-time
    {
        top:0;
        left:0;
        height:26px;
        border-top:1px slid #204482;
        font-weight: bold;
        position: absolute;
        overflow: hidden;
        z-index: 6;
    }
    .epg-time ul
    {
        position: relative;
        margin:0;
        padding:0 0 0 122px;
        background-color: #A8C8EF;
        display: inline-block;
    }
    .epg-time li
    {
        width:289px; /* 300 - 10px padding - 1px border */
        line-height:26px;
        padding-left:10px;
        float:left;
        list-style-type:none;
        position:relative;
        border-left:1px solid black;
    }
    .epg-listings
    {
        left:121px;
        top:26px;
        position:absolute;
        /*overflow:hidden;*/
        padding:0;
        margin:0;
        bottom:0;
        right:0;
    }
    .epg-listings-channel .listings
    {        
        height:65px;
        display:block;
        border:solid 1px black;
        border-bottom:none;
        color:White;
        position:relative;
        margin:0;
        padding:0;
        overflow:hidden;
    }
    .listing
    {
        background:#999;        
        border-left:solid 1px white;
        margin:0;
        padding:0;
        text-overflow: ellipsis-word;       
        
        height:100%;        
        top:1px;
        bottom:1px;
        
        display:inline-block;
        position:absolute;
    }
    .listing .title
    {
        padding:5px;
        display:block;
    }
    .listing .description
    {
        display:none;
    }
    .listing .subtitle
    {
        display:none;
    }
</style>

<style>
    /* other page styling */
    .epg-days
    {
        margin:0;
        padding:0;
        position:absolute;
        top:140px;
        left:30px;
        right:30px;
    }
    .epg-days ul
    {
        margin:0;
        padding:0;
        display: table;
        width: 100%;
    }
    .epg-days li
    {
        list-style:none;
        margin:0;
        padding:0;
        display: table-cell;
        text-align: center;
        background:yellow;
        line-height:30px;
        border:solid 1px black;
        border-right:none;
    }
    .epg-days li:last-child
    {
        border-right:solid 1px black;
    }
    .epg-days li a
    {
        display: block;
        text-align: center;
    }
</style>

<h2>Index</h2>

<div class="epg-days">
    <ul data-bind="foreach:epgdays">
        <li class="epg-day">
            <a href="#" data-bind="text: displayText, click: $root.changeEpgDay" onclick="return false"></a>
        </li>
    </ul>
</div>

<div class="epg-container">
    <div class="epg">
        <div class="epg-channels">
            <ul data-bind="foreach: channels, visible: channels().length > 0">
                <li class="epg-channel">
                    <img class="logo" data-bind="visible: iconVisible, attr: { src: icon } "  />
                    <span class="name" data-bind="text: name"></span>
                    <span class="number" data-bind="text: number"></span>      
                    <span class="oid" data-bind="text: oid"></span>
                </li>
            </ul>
        </div>
        <div class="epg-time">
            <ul class="timeline" data-bind="foreach: timeline, visible: timeline().length > 0">
                <li class="time">
                    <span data-bind="text: $data"></span>
                </li> 
            </ul>
        </div>
        <div class="epg-listings">
            <div class="epg-listings-channel" data-bind="foreach: channels, visible: channels().length > 0">
                <ul class="listings" data-bind="foreach:listings">
                    <li class="listing" data-bind="attr: { style: $root.listingCss($data), dataStart: startTime } ">
                        <span class="title" data-bind="text: title"></span>
                        <span class="start" data-bind="text: $root.formattedDate(startTime)"></span>
                        <span class="subtitle" data-bind="text: subtitle"></span>
                        <span class="description" data-bind="text: description"></span>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        var guideStart;
        var minuteWidth = 5;

        function getMinutesFromStartOfGuide(time) {
            var diff = Math.abs(time - guideStart);        
            var minutes = Math.floor((diff / 1000) / 60);
            return minutes;
        }
        $(function () {
            var epgtime = $('.epg-time');
            var epgchannels = $('.epg-channels');
            $('.epg-container').scroll(function () {
                var top = $(this).scrollTop();
                epgtime.css('top', top);
                var left = $(this).scrollLeft();
                epgchannels.css('left', left);
            });

            function Channel(data) {
                this.name = ko.observable(data.Name);
                this.number = ko.observable(data.Number);
                this.icon = ko.observable((data.Icon && data.Icon.length > 0) ? "data:image/png;base64," + data.Icon : "");
                this.iconVisible = (data.Icon && data.Icon.length > 0);
                this.oid = ko.observable(data.OID);
                this.listings = ko.observable(data.Listings);
            }

            function GuideViewModel() {
                // Data
                var self = this;
                self.channels = ko.observableArray([]);

                self.listingCss = function (listing) {
                    var css = '';
                    var dStart = Date.parse(listing.startTime);
                    var dEnd = Date.parse(listing.endTime);
                    var start = getMinutesFromStartOfGuide(dStart);
                    var end = getMinutesFromStartOfGuide(dEnd);
                    css += 'left: ' + (minuteWidth * start) + 'px;width:' + (minuteWidth * (end - start)) + 'px';
                    return css;
                }
                self.formattedDate = function (date) {
                    date = new Date(date);
                    if (date.getMinutes() < 10)
                        return date.getHours() + ':0' + date.getMinutes() + ' (' + date.getDate() + '/' + (date.getMonth() + 1) + ')';
                    return date.getHours() + ':' + date.getMinutes() + ' (' + date.getDate() + '/' + (date.getMonth() + 1) + ')';
                }
                var times = new Array();
                for (var i = 0; i < 24; i++) {
                    if (i == 0)
                        times.push('12am');
                    else if (i < 12)
                        times.push(i + 'am');
                    else if (i == 12)
                        times.push('12pm');
                    else
                        times.push((i - 12) + 'pm');
                }
                self.timeline = ko.observableArray(times);

                var days = new Array();
                var daysOfWeekString = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
                var currentDayOfWeek = new Date().getDay();
                for (var i = 0; i < 7; i++) {
                    var tDate = new Date();
                    tDate.setDate(tDate.getDate() + i);
                    tDate.setHours(0, 0, 0, 0);
                    days.push({ name: daysOfWeekString[currentDayOfWeek], link: '#' + currentDayOfWeek, date: tDate, displayText: daysOfWeekString[currentDayOfWeek] + " (" + tDate.getDate() + '/' + (tDate.getMonth() + 1) + ')' });
                    if (++currentDayOfWeek >= 7)
                        currentDayOfWeek = 0;

                }
                self.epgdays = ko.observableArray(days);

                var loadEpgData = function (date) {
                    console.log('loading epg date for: ' + date);
                    guideStart = date;
                    self.channels.removeAll();
                    api.getJSON('guide?date=' + date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate(), function (allData) {
                        var mapped = $.map(allData, function (item) { return new Channel(item) });
                        self.channels(mapped);
                    });
                    /*
                    $.getJSON("/api/guide?date=" + date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate(), function (allData) {
                        var mapped = $.map(allData, function (item) { return new Channel(item) });
                        self.channels(mapped);
                    });
                    */
                }

                // Operations
                //self.deleteRecording = function (recording) { self.recordings.remove(recording) };
                self.changeEpgDay = function (day) {
                    loadEpgData(day.date);
                }

                // Load initial state from server, convert it to Task instances, then populate self.tasks
                loadEpgData(new Date(new Date().setHours(0, 0, 0, 0)));
            }

            ko.applyBindings(new GuideViewModel());
        });
    </script>
}