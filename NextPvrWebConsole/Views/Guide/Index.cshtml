@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/Content/guide/css")

<h2>Index</h2>

<div class="epg-days">
    <ul data-bind="foreach:epgdays">
        <li class="epg-day">
            <a href="#" data-bind="text: displayText, click: $root.changeEpgDay" onclick="return false"></a>
        </li>
    </ul>
</div>

<div class="epg-container">
    <div class="epg">
        <div class="epg-channels">
            <ul data-bind="foreach: channels, visible: channels().length > 0">
                <li class="epg-channel">
                    <img class="logo" data-bind="visible: iconVisible, attr: { src: icon } "  />
                    <span class="name" data-bind="text: name"></span>
                    <span class="number" data-bind="text: number"></span>      
                    <span class="oid" data-bind="text: oid"></span>
                </li>
            </ul>
        </div>
        <div class="epg-time">
            <ul class="timeline">
                @for (int i = 0; i < 24; i++)
                {
                <li class="time">
                    <span>@(i == 0 ? "12am" : (i == 12 ? "12pm" : (i > 12 ? (i - 12) + "pm" : i + "am")))</span>
                </li> 
                }
            </ul>
        </div>
        <div class="epg-listings">
            <div class="epg-listings-channel" data-bind="foreach: channels, visible: channels().length > 0">
                <ul class="listings" data-bind="foreach:listings, attr: { 'data-channeloid': oid } ">
                    <li data-bind="attr: { style: $root.listingCss($data), class: $root.listingClass($data, 'listing'), 'data-start': startTime, 'data-oid': oid } ">
                        <div>
                            <span class="title" data-bind="text: title"></span>
                            <span class="start" data-bind="text: $root.formattedDate(startTime)"></span>
                            <span class="subtitle" data-bind="text: subtitle"></span>
                            <span class="description" data-bind="text: description"></span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div id="show-info" style="display:none" data-bind="with: selectedshow">    
    <img class="channellogo" data-bind="visible: channelLogoVisible, attr: { src: channelLogoData } " />
    <span class="channelnumber" data-bind="text:channelNumber"></span>
    <span class="channelname" data-bind="text:channelName"></span>
    <span class="time">
        <text data-bind="text:startTimeLong()"></text> - <text data-bind="text:endTimeShort()"></text> (<text data-bind="text:duration()"></text>)
    </span>
    <span class="genres" data-bind="text:genresString()"></span>  
    <span class="subtitle" data-bind="stext: subtitle"></span>
    <span class="description" data-bind="text: description"></span>  
</div>

<div id="recording-options" style="display:none">
    <table>
        <tr>
            <td>Recording Type</td>
            <td>
                <select id="recording-type">
                    <option value="0">Record Once
                    <option value="1">Record Season (NEW episodes on this channel)
                    <option value="2">Record Season (All episodes on this channel)
                    <option value="3">Record Season (Daily, this timeslot)
                    <option value="4">Record Season (Weekly, this timeslot)
                    <option value="5">Record Season (Monday - Friday, this timeslot)
                    <option value="6">Record All Episodes, All Channels
                </select>
            </td>
        </tr>

        <tr>
            <td>Pre-Padding</td>
            <td><input type="number" min="0" max="89" id="recording-prepadding" /> (Minutes)</td>
        </tr>

        <tr>
            <td>Post-Padding</td>
            <td><input type="number" min="0" max="89" id="recording-postpadding" /> (Minutes)</td>
        </tr>

        <tr>
            <td>Directory</td>
            <td>
                <select id="recording-directory">
                    <option value="0">Default
                </select>
            </td>
        </tr>

        <tr>
            <td>Keep</td>
            <td>
                <select id="recoding-keep">
                    <option value="0">All Recordings
                    @for (int i = 1; i < 29; i++)
                    {
                        <option value="@i">@i @(i == 1 ? "Recording" : "Recordings")</option>
                    }
                </select>
            </td>
        </tr>
    </table>
</div>

@section Scripts{
    <script type="text/javascript">
        var guideStart;
        var minuteWidth = 5;
        var guideData = null;

        function showInfo(apiChannel, apiShow) {
            var self = this;
            self.apiChannel = apiChannel;
            self.apiShow = apiShow;
            self.title = ko.observable(apiShow.title);
            self.subtitle = ko.observable(apiShow.subtitle);
            self.description = ko.observable(apiShow.description);
            self.channelName = ko.observable(apiChannel.Name);
            self.channelNumber = ko.observable(apiChannel.Number);
            self.startTimeLong = ko.computed(function () { return $.format.date(Date.parse(apiShow.startTime), 'd MMMM h:mm a'); });
            self.endTimeShort = ko.computed(function () { return $.format.date(Date.parse(apiShow.endTime), 'h:mm a') });
            self.duration = ko.computed(function () { return Math.floor((Math.abs(Date.parse(apiShow.endTime) - Date.parse(apiShow.startTime)) / 1000) / 60) + ' minutes' });
            self.genresString = ko.computed(function () {
                if (apiShow.genres)
                    return $.Enumerable.From(apiShow.genres).Select(function (x) {
                        x = x.replace('/', ', ');
                        x = x.replace(/\w\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1); });
                        return x.replace(' , ', ', ');
                    }).ToString(', ');
                return '';
            });
            self.channelLogoVisible = ko.computed(function () { return apiChannel.Icon && apiChannel.Icon.length > 0; });
            self.channelLogoData = ko.computed(function () {
                if (apiChannel.Icon && apiChannel.Icon.length > 0)
                    return 'data:image/png;base64,' + apiChannel.Icon;
                return '';
            });
        }

        function getMinutesFromStartOfGuide(time) {
            var diff = time - guideStart;
            var minutes = Math.floor((diff / 1000) / 60);
            return minutes;
        }
        $(function () {
            var epgtime = $('.epg-time');
            var epgchannels = $('.epg-channels');
            $('.epg-container').scroll(function () {
                var top = $(this).scrollTop();
                epgtime.css('top', top);
                var left = $(this).scrollLeft();
                epgchannels.css('left', left);
            });

            function Channel(data) {
                this.name = ko.observable(data.Name);
                this.number = ko.observable(data.Number);
                this.icon = ko.computed(function () {
                    if (data.Icon && data.Icon.length > 0)
                        return 'data:image/png;base64,' + data.Icon;
                    return '';
                });
                this.iconVisible = (data.Icon && data.Icon.length > 0);
                this.oid = ko.observable(data.OID);
                this.listings = ko.observable(data.Listings);
            }

            function GuideViewModel() {
                // Data
                var self = this;

                self.listingCss = function (listing) {
                    var css = '';
                    var dStart = Date.parse(listing.startTime);
                    var dEnd = Date.parse(listing.endTime);

                    var guideEnd = new Date(guideStart.getTime());
                    guideEnd.setDate(guideEnd.getDate() + 1);

                    if (dEnd > guideEnd) {
                        // ends before end of day
                        dEnd = guideEnd;
                    }

                    var start = getMinutesFromStartOfGuide(dStart);
                    var end = getMinutesFromStartOfGuide(dEnd);

                    if (start < 0) {
                        // starts the day before
                        start = 0;
                    }

                    css += 'left: ' + ((minuteWidth * start)) + 'px;width:' + ((minuteWidth * (end - start)) - 1) + 'px';
                    return css;
                }
                self.listingClass = function (listing, _class) {
                    if (_class)
                        _class += ' ';
                    else
                        _class = '';
                    var end = new Date(guideStart.getTime());
                    end.setDate(end.getDate() + 1);
                    if (Date.parse(listing.startTime) < guideStart)
                        _class += 'pre-guide-start ';
                    if (Date.parse(listing.endTime) > end)
                        _class += 'post-guide-end ';
                    return _class;
                }
                self.formattedDate = function (date) {
                    date = new Date(date);
                    if (date.getMinutes() < 10)
                        return date.getHours() + ':0' + date.getMinutes() + ' (' + date.getDate() + '/' + (date.getMonth() + 1) + ')';
                    return date.getHours() + ':' + date.getMinutes() + ' (' + date.getDate() + '/' + (date.getMonth() + 1) + ')';
                }

                // might shift this into server side code...
                var days = new Array();
                var daysOfWeekString = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
                var currentDayOfWeek = new Date().getDay();
                for (var i = 0; i < 7; i++) {
                    var tDate = new Date();
                    tDate.setDate(tDate.getDate() + i);
                    tDate.setHours(0, 0, 0, 0);
                    days.push({ name: daysOfWeekString[currentDayOfWeek], link: '#' + currentDayOfWeek, date: tDate, displayText: daysOfWeekString[currentDayOfWeek] + " (" + tDate.getDate() + '/' + (tDate.getMonth() + 1) + ')' });
                    if (++currentDayOfWeek >= 7)
                        currentDayOfWeek = 0;
                }
                self.epgdays = ko.observableArray(days);

                self.channels = ko.observableArray([]);
                var loadEpgData = function (date) {
                    guideStart = date;
                    self.channels.removeAll();
                    api.getJSON('guide?date=' + date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate(), function (allData) {
                        var mapped = $.map(allData, function (item) { return new Channel(item) });
                        self.channels(mapped);
                        guideData = allData;
                    });
                }

                // Operations
                self.changeEpgDay = function (day) { loadEpgData(day.date); }

                // Load initial state from server, convert it to Task instances, then populate self.tasks
                loadEpgData(new Date(new Date().setHours(0, 0, 0, 0)));

                self.selectedshow = ko.observable();

                $('.epg-listings').on('click.epg', '.listing', function () {
                    // get listing info, helper for this.
                    var showInfo = getShowInfo($(this));
                    console.log('showInfo...');
                    console.log(showInfo);

                    self.selectedshow(showInfo);
                    $('#show-info').dialog({
                        modal: true,
                        title: showInfo.title(),
                        minWidth: 600,
                        beforeClose: function (event, ui) {
                            self.selectedshow(null);
                        },
                        buttons: {
                            'Quick Record': function () {
                                $(this).dialog('close');
                            },
                            'Record': function () {
                                $(this).dialog('close');
                            },
                            'Find All': function () {
                                $(this).dialog('close');
                            },
                            'Close': function () {
                                $(this).dialog('close');
                            }
                        }
                    });
                    return;

                    // show show info window, but for now show recordings
                    $('#recording-options').dialog({
                        modal: true,
                        title: 'Record Show',
                        width: 600,
                        height: 300,
                        buttons: {
                            'OK': function () { $('#recording-options').dialog('close'); },
                            'Cancel': function () { $('#recording-options').dialog('close'); }
                        }
                    });
                });

            }

            ko.applyBindings(new GuideViewModel());

            function getShowInfo(liElement) {
                var channelOid = parseInt(liElement.closest('ul').attr('data-channeloid'), 10);
                var programOid = parseInt(liElement.attr('data-oid'), 10);

                var channel = $.Enumerable.From(guideData)
                                          .Where(function (x) { return x.OID == channelOid; })
                                          .FirstOrDefault();
                if (!channel)
                    return null;

                var show = $.Enumerable.From(channel.Listings)
                                       .Where(function (x) { return x.oid == programOid; })
                                       .FirstOrDefault();
                if (!show)
                    return null;

                return new showInfo(channel, show);
            }
        });
    </script>
}