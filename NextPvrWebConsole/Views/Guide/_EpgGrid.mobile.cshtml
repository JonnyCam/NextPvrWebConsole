@model List<NextPvrWebConsole.Models.Channel>
@{
    DateTime GuideStart = ((DateTime)ViewBag.GuideStart).ToUniversalTime();
    DateTime GuideEnd = GuideStart.AddDays(1);
    int minuteWidth = 3;
    var listingCss = new Func<NextPvrWebConsole.Models.EpgListing, string>((NextPvrWebConsole.Models.EpgListing listing) =>
    {            
        DateTime dEnd = listing.EndTime;
        DateTime dStart = listing.StartTime;

        if (listing.EndTime > GuideEnd)
        {
            dEnd = GuideEnd; // ends before end of day
        }

        var start = (int)dStart.Subtract(GuideStart).TotalMinutes;
        var end = (int)dEnd.Subtract(GuideStart).TotalMinutes;

        if (start < 0)
        {
            start = 0; // starts the day before
        }

        return "left: " + ((minuteWidth * start)) + "px;width:"+ ((minuteWidth * (end - start)) - 1) + "px";
    });
    var listingClass = new Func<NextPvrWebConsole.Models.EpgListing, string>((NextPvrWebConsole.Models.EpgListing listing) =>
    {
        string _class = "";

        if (listing.StartTime < GuideStart)
        {
            _class += "pre-guide-start ";
        }
        if (listing.EndTime > GuideEnd)
        {
            _class += "post-guide-end ";
        }
        if (listing.IsRecording)
        {
            _class += "recording ";
        }
        return _class;
    });
    
    int totalMinutes = (int)GuideEnd.Subtract(GuideStart).TotalMinutes;
}

<div id="timeline">
    <table>
        <tr>
            <td class="spacer"></td>            
    @{
        DateTime tempDate = GuideStart;
        while(tempDate < GuideEnd){
            <td class="bucket 60min" style="width:@(60 * minuteWidth)px">&nbsp;&nbsp;@tempDate.ToString("h tt")</td>    
            tempDate = tempDate.AddMinutes(60);
        }
    }
        </tr>
    </table>
</div>
<div id="channelicons">
    @foreach (var channel in Model)
    {
        <div class="icon">
            @if (channel.HasIcon)
            {  
                <img src="/channelicon/@channel.Oid" />
            }
            else
            {
                <span class="text">@channel.Name</span>
            }
        </div>
    }
</div>
<div id="programs">
	<ul id="programList" style="width:@(totalMinutes * minuteWidth)px">
        @foreach (var channel in Model)
        {
        <li class="channel">
            @foreach (var listing in channel.Listings)
            {
                int duration = (int)listing.EndTime.Subtract(listing.StartTime).TotalMinutes;
                int width = (minuteWidth * duration) - 1;
                int xPos = (int)(listing.StartTime - GuideStart).TotalMinutes * minuteWidth;
                <span class="program" data-start="@listing.StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss")Z" data-end="@listing.EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss")Z" 
                    data-duration="@duration" style="width:@(width)px;position:absolute;left:@(xPos)px"><div>@listing.Title</div></span>
            }
        </li>
        }
	</ul>
</div>