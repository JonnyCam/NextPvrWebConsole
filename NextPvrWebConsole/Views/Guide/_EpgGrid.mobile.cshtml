@model List<NextPvrWebConsole.Models.Channel>
@{
    DateTime GuideStart = ((DateTime)ViewBag.GuideStart).ToUniversalTime();
    DateTime GuideEnd = GuideStart.AddDays(1);
    int minuteWidth = 3;
    var listingCss = new Func<NextPvrWebConsole.Models.EpgListing, string>((NextPvrWebConsole.Models.EpgListing listing) =>
    {            
        DateTime dEnd = listing.EndTime;
        DateTime dStart = listing.StartTime;

        if (listing.EndTime > GuideEnd)
        {
            dEnd = GuideEnd; // ends before end of day
        }

        var start = (int)dStart.Subtract(GuideStart).TotalMinutes;
        var end = (int)dEnd.Subtract(GuideStart).TotalMinutes;

        if (start < 0)
        {
            start = 0; // starts the day before
        }

        return "left: " + ((minuteWidth * start)) + "px;width:"+ ((minuteWidth * (end - start)) - 1) + "px";
    });
    var listingClass = new Func<NextPvrWebConsole.Models.EpgListing, string>((NextPvrWebConsole.Models.EpgListing listing) =>
    {
        string _class = "";

        if (listing.StartTime < GuideStart)
        {
            _class += "pre-guide-start ";
        }
        if (listing.EndTime > GuideEnd)
        {
            _class += "post-guide-end ";
        }
        if (listing.IsRecording)
        {
            _class += "recording ";
        }
        return _class;
    });
    
    int totalMinutes = (int)GuideEnd.Subtract(GuideStart).TotalMinutes;

    bool iFrame = true;

    bool isToday = DateTime.Today.ToString("yyyy-MM-dd") == GuideStart.ToLocalTime().ToString("yyyy-MM-dd");
}

@if (iFrame)
{
    <!doctype html>
    <html>
    <head>
        <meta charset="utf-8" />

        <!-- Always force latest IE rendering engine (even in intranet) & Chrome Frame 
             Remove this if you use the .htaccess -->
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

        <title>NextPVR Web Console - Guide</title>
          
        <!--  Mobile viewport optimized -->
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black">
        
        @Styles.Render("~/Content/mobile/css")        
       
        @Scripts.Render("~/bundles/mobile/js")  
    </head>

    <body class="pageguide">

        <div id="timeline">
        @{
            /* need to user string builder, because in IE empty text nodes appear and create a unwanted "space" between each td */
            System.Text.StringBuilder timeline = new System.Text.StringBuilder();
            timeline.Append("<table><tr><td class=\"spacer\">&nbsp;</td>");
            DateTime tempDate = GuideStart;
            while (tempDate < GuideEnd)
            {
                timeline.Append("<td class=\"bucket sixty-minute\">&nbsp;&nbsp;" + tempDate.ToLocalTime().ToString("h tt") + "</td>");
                tempDate = tempDate.AddMinutes(60);
            }
            timeline.Append("</tr></table>");
        }
        @Html.Raw(timeline.ToString())
        </div>
        <div id="channelicons">
            @foreach (var channel in Model)
            {
                <div class="icon">
                    @if (channel.HasIcon)
                    {  
                        <img src="/channelicon/@channel.Oid" />
                    }
                    else
                    {
                        <span class="text">@channel.Name</span>
                    }
                </div>
            }
        </div>
        <div id="programs">
	        <ul id="programList" style="width:@(totalMinutes * minuteWidth)px">
                @foreach (var channel in Model)
                {
                <li class="channel">
                    @foreach (var listing in channel.Listings ?? new List<NextPvrWebConsole.Models.EpgListing>())
                    {
                        int duration = (int)listing.EndTime.Subtract(listing.StartTime).TotalMinutes;
                        int width = (minuteWidth * duration) - 1;
                        int xPos = (int)(listing.StartTime - GuideStart).TotalMinutes * minuteWidth;
                        <span class="program @(listing.IsRecording ? "recording" : "")" data-start="@listing.StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss")Z" data-end="@listing.EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss")Z" 
                            data-duration="@duration" style="width:@(width)px;position:absolute;left:@(xPos)px" data-oid="@listing.Oid"><div>@listing.Title (@listing.StartTime.ToLocalTime().ToString("h:mm tt"))</div></span>
                    }
                </li>
                }
	        </ul>
        </div>

        <script>
            $(function(){
                var lastScroll = new Date();  
                var hidden = false;          
                var timeline = $('#timeline');
                var channelicons = $('#channelicons');
                

                @if(isToday){
                <text>
                    hidden = false;
                    var now = new Date(),
                        then = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0),
                        diff = now.getTime()-then.getTime(); 
                        diff = diff - (diff % (60 * 60 * 1000));
                    var minutes = diff / (60 * 1000);
                    var pixels = Math.floor(minutes * @minuteWidth);
                    setTimeout(function(){
                    $(document).scrollLeft(pixels);
                    }, 1500);
                </text>
                }

                $(document).scroll(function (e) {
                    hidden = true;
                    lastScroll = new Date();
                
                    var yPos = $(document).scrollTop();
                    var xPos = $(document).scrollLeft();

                    channelicons.css({ left: '0px' });
                    timeline.css({ top: '0px' });
                });

                setInterval(function () {   
                    if (!hidden || new Date().getTime() - lastScroll.getTime() < 500)
                        return;
                    hidden = false;
                    var yPos = $(document).scrollTop();
                    var xPos = $(document).scrollLeft();
                    channelicons.css({ left: (xPos) + 'px' });
                    timeline.css({ top: (yPos) + 'px'});
                }, 500);

                $('#programList').on('taphold', '.program', function(event){
                    if($.mobile.isScrolling())
                        return;
                    var oid = $(this).attr('data-oid');
                    console.log(event);
                    console.log('tapheld');
                    window.parent.epgShowProgram(oid);
                });

                window.parent.epgIframeLoaded();
            });
        </script>
    </body>
    </html>
}
else
{

<div id="timeline">
    <table>
        <tr>
            <td class="spacer"></td>            
    @{
    DateTime tempDate = GuideStart;
    while (tempDate < GuideEnd)
    {
            <td class="bucket 60min" style="width:@(60 * minuteWidth)px">&nbsp;&nbsp;@tempDate.ToString("h tt")</td>    
        tempDate = tempDate.AddMinutes(60);
    }
    }
        </tr>
    </table>
</div>
<div id="channelicons">
    @foreach (var channel in Model)
    {
        <div class="icon">
            @if (channel.HasIcon)
            {  
                <img src="/channelicon/@channel.Oid" />
            }
            else
            {
                <span class="text">@channel.Name</span>
            }
        </div>
    }
</div>
<div id="programs">
	<ul id="programList" style="width:@(totalMinutes * minuteWidth)px">
        @foreach (var channel in Model)
        {
        <li class="channel">
            @foreach (var listing in channel.Listings)
            {
                int duration = (int)listing.EndTime.Subtract(listing.StartTime).TotalMinutes;
                int width = (minuteWidth * duration) - 1;
                int xPos = (int)(listing.StartTime - GuideStart).TotalMinutes * minuteWidth;
                <span class="program @(listing.IsRecording ? "recording" : "")" data-start="@listing.StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss")Z" data-end="@listing.EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss")Z" 
                    data-duration="@duration" style="width:@(width)px;position:absolute;left:@(xPos)px"><div>@listing.Title</div></span>
            }
        </li>
        }
	</ul>
</div>
}