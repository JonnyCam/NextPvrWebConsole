@{
    ViewBag.Title = "Configuration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles{
    @Styles.Render("~/Content/configuration/css")
}

<div class="configuration vtab-container">

    <ul class="vtab-buttons">
        <li data-tab="configuration-tab-general" class="first selected"><i class="icon icon-wrench"></i><span data-lang="General" /></li>
        <li data-tab="configuration-tab-devices"><i class="icon icon-cogs"></i><span data-lang="Devices" /></li>
        <li data-tab="configuration-tab-recording"><i class="icon icon-adjust"></i><span data-lang="Recording" /></li>
        <li data-tab="configuration-tab-channelgroups"><i class="icon icon-sitemap"></i><span data-lang="Channel Groups" /></li>
        <li data-tab="configuration-tab-channels"><i class="icon icon-list-ul"></i><span data-lang="Channels" /></li>
        <li data-tab="configuration-tab-users"><i class="icon icon-group"></i><span data-lang="Users" /></li>
        <li data-tab="configuration-tab-about" class="last"><i class="icon icon-info-sign"></i><span data-lang="About" /></li>
    </ul>
    
    <div class="vtab-content selected" id="configuration-tab-general">
        @{
            var modelGeneral = (NextPvrWebConsole.Models.ConfigurationModels.GeneralConfiguration)ViewBag.GeneralModel;
        }
        @using(Ajax.BeginForm("UpdateGeneral", "Configuration",new AjaxOptions() { OnBegin = "api.onbegin", OnComplete = "api.oncomplete", OnFailure = "api.onfailure", OnSuccess = "api.onsuccess" })) 
        {
            <table>
                <tr class="livetvbuffer">
                    <td class="label" data-lang="Live TV Buffer"></td>
                    <td class="value">
                        @Html.TextBoxFor(m => modelGeneral.LiveTvBufferDirectory, new { @readonly= "readonly" })
                        <button class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" id="btnLiveTvBufferBrowse" onclick="return false">...</button>
                        <span class="description" data-lang="LiveTvBuffer-Description" />
                    </td>
                </tr>
                <tr>
                    <td class="label" data-lang="UpdateDvbEpgDuringLiveTv"></td>
                    <td class="value">
                        @Html.EditorFor(m => modelGeneral.UpdateDvbEpgDuringLiveTv)
                        <span class="description" data-lang="UpdateDvbEpgDuringLiveTv-Description" />
                    </td>
                </tr>
                <tr>
                    <td class="label" data-lang="EpgUpdateHour"></td>
                    <td class="value">
                        @Html.EditorFor(m => modelGeneral.EpgUpdateHour, "HourPicker")
                        @Html.ValidationMessageFor(m => modelGeneral.EpgUpdateHour)
                        <span class="description" data-lang="EpgUpdateHour-Description" />
                    </td>
                </tr>
                <tr>
                    <td class="label"></td>
                    <td class="value">
                        <button class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only">
                            <span class="icon-save icon-large" data-lang="Save"></span>
                        </button>
                    </td>
                </tr>
            </table>
        }
        
    </div>
    <div class="vtab-content" id="configuration-tab-devices">
    
        @{
            var modelDevices = (NextPvrWebConsole.Models.ConfigurationModels.DevicesConfiguration)ViewBag.DevicesModel;
        }
        <table class="devices" id="device-table">
            <thead>
                <tr>
                    <th class="handle"></th>
                    <th class="type" data-lang="Type"></th>
                    <th class="device" data-lang="Device"></th>
                    <th class="present" data-lang="Present"></th>
                    <th class="enabled" data-lang="Enabled"></th>
                    <th class="channels" data-lang="Channels"></th>
                </tr>
            </thead>
            <tbody data-bind="sortable: { template: 'device-template', data: devices, options: { handle: 'td:first' }, afterMove: afterMove }">
            </tbody>
        </table>

        <script  type="text/html" id="device-template">
            <tr>
                <td class="handle"><i class="icon-move"></i></td>
                <td class="type" data-bind="text: sourceType"></td>
                <td class="device" data-bind="text: name"></td>
                <td class="present" data-bind="text: presentString"></td>
                <td class="enabled"><input type="checkbox" data-bind="checked: enabled, attr: { id: 'device_' + oid() + '_enabled' }" /></td>
                <td class="channels" data-bind="text: numberOfChannels"></td>
            </tr>            
        </script>

        <table>
            <tr>
                <td class="label" data-lang="UseReverseOrderForLiveTv"></td>
                <td class="value">
                    @Html.EditorFor(m => modelDevices.UseReverseOrderForLiveTv)
                    <span class="description" data-lang="UseReverseOrderForLiveTv-Description" />
                </td>
            </tr>
            <tr>
                <td class="label"></td>
                <td class="value">
                    <button onclick="return false" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" id="btnDevicesSave">
                        <span class="icon-save icon-large" data-lang="Save"></span>
                    </button>
                </td>
            </tr>
        </table>
    </div>
    <div class="vtab-content" id="configuration-tab-channelgroups">
        <p>Here you can configure the global channel groups for the system.  If in user mode each user will be able to use these channel groups, they will not be able to edit them however.</p>

        <table>
            <thead>
                <tr>
                    <th class="handle"></th>
                    <th class="name" data-lang="Channel Group Name"></th>
                    <th class="channels" data-lang="Channels"></th>
                    <th class="controls"></th>
                </tr>
            </thead>
            <tbody data-bind="sortable: { data: channelGroups, options: { handle: 'td:first' } }">
                <tr>
                    <td class="handle"><i class="icon-move"></i></td>
                    <td class="name" data-bind="text: name"></td>
                    <td class="channels">
                        <a href="#" onclick="return false" data-bind="text:numberOfChannels, click: $root.selectChannels"></a>
                    </td>
                    <td class="controls">
                        <button onclick="return false" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" data-bind="click: $root.rename">
                            <span class="icon-edit icon-large" data-lang="Rename"></span>
                        </button>
                        <button onclick="return false" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" data-bind="click: $root.remove">
                            <span class="icon-remove icon-large" data-lang="Remove"></span>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="buttons">
            <button onclick="return false" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" id="btnCreateChannelGroup" data-bind="click: $root.create">
                <span class="icon-plus icon-large" data-lang="Create Channel Group"></span>
            </button>
            <br />
            <button onclick="return false" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" id="btnChannelGroupsSave" data-bind="click: $root.save">
                <span class="icon-save icon-large" data-lang="Save"></span>
            </button>
        </p>
        

        <div id="ChannelGroups-Channels" style="display:none">
            <ul data-bind="foreach: channels">
                <li>
                    <input type="checkbox" class="noibutton" data-bind="checked: enabled, attr: { id: 'ChannelGroups-Channels-Channel-' + $index() }"  />
                    <label data-bind="text: name, attr: { for: 'ChannelGroups-Channels-Channel-' + $index() }" />
                </li>
            </ul>
        </div>
    </div>
    <div class="vtab-content" id="configuration-tab-channels">
        
    </div>
    <div class="vtab-content" id="configuration-tab-recording">
        @{
            var modelRecording = (NextPvrWebConsole.Models.ConfigurationModels.RecordingConfiguration)ViewBag.RecordingModel;
        }
        <table>
            <tr>
                <td class="label" data-lang="Pre-Padding"></td>
                <td class="value">
                    @Html.EditorFor(m => modelRecording.PrePadding)
                    <span class="description" data-lang="PrePadding-Description" />
                </td>
            </tr>
            <tr>
                <td class="label" data-lang="Post-Padding"></td>
                <td class="value">
                    @Html.EditorFor(m => modelRecording.PostPadding)
                    <span class="description" data-lang="PostPadding-Description" />
                </td>
            </tr>
            <tr>
                <td class="label" data-lang="BlockShutdownWhileRecording"></td>
                <td class="value">
                    @Html.EditorFor(m => modelRecording.BlockShutDownWhileRecording)
                    <span class="description" data-lang="BlockShutdownWhileRecording-Description" />
                </td>
            </tr>
            <tr>
                <td class="label" data-lang="RecurringMatch"></td>
                <td class="value">
                    @Html.EditorFor(m => modelRecording.RecurringMatch, "Enum")
                    <span class="description" data-lang="RecurringMatch-Description" />
                </td>
            </tr>
            <tr>
                <td class="label" data-lang="AvoidDuplicateRecordings"></td>
                <td class="value"> 
                    @Html.EditorFor(m => modelRecording.AvoidDuplicateRecordings)
                    <span class="description" data-lang="AvoidDuplicateRecordings-Description" />
                </td>
            </tr>
            <tr class="recording-directories">
                <td class="label" data-lang="Recording Directories"></td>
                <td class="value">
                    <ul data-bind="foreach: recordingDirectories">
                        <li>
                            <div class="controls">
                                <button onclick="return false" class="ui-button-danger ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" data-bind="click: $root.remove">
                                    <span class="icon-remove icon-large" data-lang="Remove"></span>
                                </button>
                            </div>
                            <input type="radio" name="recording-directory-default" data-bind="attr: { id : 'recording-directory-default-' + $index() }, value:$index, checked: $root.selectedDefault" />
                            <label data-bind="attr: { for : 'recording-directory-default-' + $index() }">
                                <span class="name" data-bind="text: name"></span>
                                <span class="path" data-bind="text: path"></span>
                            </label>
                        </li>
                    </ul>    
                    <button class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" data-bind="click: add">
                        <span class="icon-plus icon-large" data-lang="Add Recording Folder"></span>
                    </button>                
                </td>
            </tr>
            <tr>
                <td class="label"></td>
                <td class="value">
                    <button id="btnRecordingsSave" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only">
                        <span class="icon-save icon-large" data-lang="Save"></span>
                    </button>
                </td>
            </tr>
        </table>
    </div>

    <div class="vtab-content" id="configuration-tab-about">
        @Html.Partial("_About")
    </div>

</div>


<div id="FolderBrowserWindow" style="display:none">
    @Html.Partial("FileTree")
</div>

@section Scripts{
    <script>
        var recordingDirectories = new Array();
        @foreach(var rd in modelRecording.RecordingDirectories)
        {
            <text>recordingDirectories.push(new RecordingDirectory( { Oid: @rd.Oid, Name: "@rd.Name", Path: "@rd.Path.Replace(@"\", @"\\")", IsDefault: @rd.IsDefault.ToString().ToLower() }) );</text>
        }

        var devices = new Array();        
        @foreach (var d in modelDevices.Devices)
        {
            <text>devices.push(new Device( { Name: "@d.Name.Replace(@"\", @"\\")", Oid: @d.Oid, Enabled: @d.Enabled.ToString().ToLower(), Present: @d.Present.ToString().ToLower(), Priority: @d.Priority, SourceType: "@d.SourceType", NumberOfChannels: @d.NumberOfChannels }) );</text>
        }

        var channelGroups = new Array();            
        @foreach (NextPvrWebConsole.Models.ChannelGroup g in ViewBag.ChannelGroups)
        {
            <text>channelGroups.push(new ChannelGroup( { Name: "@g.Name.Replace(@"\", @"\\")", Oid: @g.Oid, ChannelOids: [@(String.Join(",", g.ChannelOids.Select(x => x.ToString()).ToArray())) ] }) );</text>
        }
    </script>

    @Scripts.Render("~/Scripts/configuration/js")
    @Scripts.Render("/Scripts/jquery.filetree.js")
}